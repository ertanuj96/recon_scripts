
# shellcheck disable=SC2006
red=`tput setaf 1`
green=`tput setaf 2`
yellow=`tput setaf 3`
reset=`tput sgr0`

domain=
usage() { echo -e "Usage: ./sd_enum_recon.sh -d domain " 1>&2; exit 1; }

while getopts ":d:" o; do
    case "${o}" in
        d)
            domain=${OPTARG}
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND - 1))


if [ -z "${domain}" ] ; then
   usage; exit 1;
fi

sublist3r_enum(){
  echo " ${red} Sublister is running !"
  python3.6 ~/tools/Sublist3r/sublist3r.py -d $1 -t 10 -o ./$domain/$foldername/sublist3r_domains
  # shellcheck disable=SC2154
  sublist3r_domains_count=$(wc -l ./$domain/$foldername/sublist3r_domains | awk '{print $1}')
  echo "Sublist3r Enumeration is Completed ${reset}"
  echo "${green} Total Number of subdomains enumerated by ${yellow}Sublist3r=${sublist3r_domains_count}"
}
subfinder_enum(){
  echo "${red} Subfinder is running !"
  subfinder -d $1 -nW -t 20 -silent -o ./$domain/$foldername/subfinder_domains
  subfinder_domains_count=$(wc -l ./$domain/$foldername/subfinder_domains | awk '{print $1}')
  echo "${green} Total Number of subdomains enumerated by ${yellow}SUB-FINDER=${subfinder_domains_count}"
  echo "Subfinder Enumeration is Completed !!${reset}"
}

assetfinder_enum(){
  echo "${red} Assetfinder is running !"
  assetfinder -subs-only $1 >> ./$domain/$foldername/assetfinder_domains
  assetfinder_domains_count=$(wc -l ./$domain/$foldername/assetfinder_domains | awk '{print $1}')
  echo "${green} Total Number of subdomains enumerated by ${yellow}ASSETFINDER=${assetfinder_domains_count}"
}

amass_enum(){
   amass enum -passive -config ~/amass_config.ini -silent -d $1 -o ./$domain/$foldername/amass_domains
   amass_domains_count=$(wc -l ./$domain/$foldername/amass_domains | awk '{print $1}')
   echo "${green} Total Number of subdomains enumerated by ${yellow}AMASS=${amass_domains_count}"
}

crobat_sonar_enum(){
echo "${red} Running Sonar DNS subdomain enumeration"
crobat -s $1 | sort -u > ./$domain/$foldername/sonar_domains
sonar_domains_count=$(wc -l ./$domain/$foldername/sonar_domains | awk '{print $1}')
if [[ $sonar_domains_count -eq 0  ]]; then
   new_domain_name=".${1}"
   echo "${reset}New Domain Name=${new_domain_name}"
   crobat -s $new_domain_name | sort -u >> ./$domain/$foldername/sonar_domains
fi
sonar_domains_count=$(wc -l ./$domain/$foldername/sonar_domains | awk '{print $1}')
echo "${green} Total Number of subdomains enumerated by ${yellow} SONAR_FDNS=${sonar_domains_count}"

}

generate_possibilities(){
  echo "${red}Generating Possible Subdomains......."
  # alias for commonspeaks2-wordlists
  python3.6 ~/python_projects/infosec/scripts/commonspeak2_possiblities.py $1 | sort -u  > ./$domain/$foldername/possible_domains
  possible_domains_count=$(wc -l ./$domain/$foldername/possible_domains | awk '{print $1}')
  echo "${green} Total Number of POSSIBLE subdomains generated by ${yellow} SecLists=${possible_domains_count}"

}

cleaning(){
  echo "${red}Cleaning the duplicates from all possible subdomains and SORTING the DATA !!"
  cat ./$domain/$foldername/*_domains | sort -u > ./$domain/$foldername/unique_subdomains
  unique_domains_count=$(wc -l ./$domain/$foldername/amass_domains | awk '{print $1}')
  echo "${green} Total Number of UNIQUE subdomains enumerated  ${yellow}RECON=${amass_domains_count}"

}

httpx_probe(){
  cat ./$domain/$foldername/unique_subdomains | httpx -ip -silent > ./$domain/$foldername/hosts-online.txt
  cat ./$domain/$foldername/hosts-online.txt |  awk '{print $2}'| sort  -u | cut -d "[" -f 2 | cut -d "]" -f 1 > ./$domain/$foldername/ips-online.txt
  xalive_subdomains_count=$(wc -l ./$domain/$foldername/xalive_subdomains | awk '{print $1}')
  online_ips_count=$(wc -l ./$domain/$foldername/ips-online.txt | awk '{print $1}')
  echo "${green} Total Number of Alive Subdomains found by ${yellow} HTTPX=${xalive_subdomains_count}"
  echo "${green} Total Number of Subdomains Unique IP's found by ${yellow} HTTPX=${online_ips_count}"

}

massdns_enum(){
 echo "${red}Running MassDNS ......!!"
 ~/tools/massdns/bin/massdns -r ~/tools/massdns/lists/resolvers.txt -t A -o S $domain/$foldername/possible_subdomains >> ./$domain/$foldername/massdns.out
 cat ./$domain/$foldername/massdns.out | awk '{print $1}' | sed 's/.$//' | sort -u > ./$domain/$foldername/massdns_hosts_online.txt
 massdns_domains_count=$(wc -l ./$domain/$foldername/massdns_hosts_online.txt | awk '{print $1}')
 echo "${green} Total Number of subdomains enumerated by ${yellow}MASSDNS=${massdns_domains_count}"

}

masscan_enum(){
 echo "${red}Running Massscan for eumerating open PORTS ...."
 cat ./$domain/$foldername/massdns.out | awk '{print $3}' | sort -u | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" >> ./$domain/$foldername/ips-online.txt
 sudo /usr/local/bin/masscan -iL ./$domain/$foldername/ips-online.txt --rate 50000 -p1-65535 --open -oL ./$domain/$foldername/masscan.out
 sed -i '1d;$d' ./$domain/$foldername/masscan.out | tee ./$domain/$foldername/masscan_output
 rm ./$domain/$foldername/masscan.out
 masscan_domains_count=$(wc -l ./$domain/$foldername/masscan_out | awk '{print $1}')
 echo "${green} Total Number of subdomains IPs online ${yellow}MasScan=${masscan_domains_count}"

}

nmap_scan(){
echo "${red}Running NMAP for eumerating services running on open PORTS ...."
cat ./$domain/$foldername/masscan_out | awk '{print $3}' | sort -u > ./$domain/$foldername/PORTS 
cat ./$domain/$foldername/PORTS | paste -sd, > ./$domain/$foldername/OPEN_PORTS
cat ./$domain/$foldername/masscan_out | awk '{print $4}' | sort -u >  ./$domain/$foldername/HOSTS
sudo nmap -sSV -p80 OPEN_PORTS -v --open -Pn -n --randomize-hosts -T4 -iL HOSTS -oA OUTPUT
}


recon(){
  amass_enum "$domain"
  sublist3r_enum "$domain"
  subfinder_enum "$domain"
  assetfinder_enum "$domain"
  crobat_sonar_enum $domain
  cleaning 
  httpx_probe 
  generate_possibilities $domain
  massdns_enum
  masscan_enum
  nmap_enum
}

main(){
  if [ -d "./$domain" ]
  then
    echo "This is a known target."
  else
    mkdir ./$domain
  fi

  mkdir ./$domain/$foldername/
  echo "${red}STARTING the ${green} RECON PART I ...... !!"
  recon $domain
  echo "${red}PART I ${green} RECON is Ended ...... !!"
}

todate=$(date +"%Y-%m-%d")
foldername=recon-$todate

main $domain
